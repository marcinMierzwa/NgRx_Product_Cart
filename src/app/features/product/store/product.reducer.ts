import { createFeature, createReducer, createSelector, on } from '@ngrx/store';
import { initialProductState, productAdapter } from './product.state';
import { ProductActions } from './product.actions';

export const productFeature = createFeature({
  name: 'products', // this is a key to register product state
  reducer: createReducer(
    initialProductState,
    // when starts loading
    on(ProductActions.loadProducts, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    // when loading success
    on(ProductActions.loadProductsSuccess, (state, { products }) => {
      // we're using adapter to fetch all products to state
      return productAdapter.setAll(products, { ...state, isLoading: false });
    }),
    // when loading success
    on(ProductActions.loadProductsFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    }))
  ),
});

// we're fetching selectors generated by entity adapter
export const {
  selectEntities, // entity dictionary { id: product }
  selectAll, // array with all products
  selectTotal,
  selectIds
} = productAdapter.getSelectors();

// we're exports selectors, which we needed
// we're binding selector for all featrure state (with 'createFeature')
// with selectors from adapter (from 'getSelectors')
// Selektor na ca≈Çy feature state (ten jest z `createFeature`)
export const selectProductState = productFeature.selectProductsState;

// Now we're creating specyfic selectors for entity
export const selectAllProducts = createSelector(selectProductState, selectAll);
export const selectProductEntities = createSelector(selectProductState, selectEntities);
export const selectProductIds = createSelector(selectProductState, selectIds);
export const selectProductTotal = createSelector(selectProductState, selectTotal);

// At the end we exports selectors on others state properties (these are for 'createFeature')
export const selectProductIsLoading = productFeature.selectIsLoading;
export const selectProductError = productFeature.selectError;